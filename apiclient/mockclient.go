// Code generated by MockGen. DO NOT EDIT.
// Source: client.go

// Package apiclient is a generated GoMock package.
package apiclient

import (
	context "context"
	gomock "github.com/golang/mock/gomock"
	io "io"
	http "net/http"
	url "net/url"
	reflect "reflect"
)

// MockAPIClient is a mock of APIClient interface
type MockAPIClient struct {
	ctrl     *gomock.Controller
	recorder *MockAPIClientMockRecorder
}

// MockAPIClientMockRecorder is the mock recorder for MockAPIClient
type MockAPIClientMockRecorder struct {
	mock *MockAPIClient
}

// NewMockAPIClient creates a new mock instance
func NewMockAPIClient(ctrl *gomock.Controller) *MockAPIClient {
	mock := &MockAPIClient{ctrl: ctrl}
	mock.recorder = &MockAPIClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockAPIClient) EXPECT() *MockAPIClientMockRecorder {
	return m.recorder
}

// Get mocks base method
func (m *MockAPIClient) Get(ctx context.Context, path string, queryParams *url.Values) (*Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", ctx, path, queryParams)
	ret0, _ := ret[0].(*Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get
func (mr *MockAPIClientMockRecorder) Get(ctx, path, queryParams interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockAPIClient)(nil).Get), ctx, path, queryParams)
}

// Do mocks base method
func (m *MockAPIClient) Do(ctx context.Context, request *http.Request) (*Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Do", ctx, request)
	ret0, _ := ret[0].(*Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Do indicates an expected call of Do
func (mr *MockAPIClientMockRecorder) Do(ctx, request interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Do", reflect.TypeOf((*MockAPIClient)(nil).Do), ctx, request)
}

// Post mocks base method
func (m *MockAPIClient) Post(ctx context.Context, path string, body io.Reader) (*Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Post", ctx, path, body)
	ret0, _ := ret[0].(*Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Post indicates an expected call of Post
func (mr *MockAPIClientMockRecorder) Post(ctx, path, body interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Post", reflect.TypeOf((*MockAPIClient)(nil).Post), ctx, path, body)
}

// PostWithQueryParams mocks base method
func (m *MockAPIClient) PostWithQueryParams(ctx context.Context, urlPath string, queryParams *url.Values, body io.Reader) (*Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PostWithQueryParams", ctx, urlPath, queryParams, body)
	ret0, _ := ret[0].(*Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// PostWithQueryParams indicates an expected call of PostWithQueryParams
func (mr *MockAPIClientMockRecorder) PostWithQueryParams(ctx, urlPath, queryParams, body interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PostWithQueryParams", reflect.TypeOf((*MockAPIClient)(nil).PostWithQueryParams), ctx, urlPath, queryParams, body)
}

// Put mocks base method
func (m *MockAPIClient) Put(ctx context.Context, path string, body io.Reader) (*Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Put", ctx, path, body)
	ret0, _ := ret[0].(*Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Put indicates an expected call of Put
func (mr *MockAPIClientMockRecorder) Put(ctx, path, body interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Put", reflect.TypeOf((*MockAPIClient)(nil).Put), ctx, path, body)
}

// Delete mocks base method
func (m *MockAPIClient) Delete(ctx context.Context, path string, body io.Reader) (*Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", ctx, path, body)
	ret0, _ := ret[0].(*Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Delete indicates an expected call of Delete
func (mr *MockAPIClientMockRecorder) Delete(ctx, path, body interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockAPIClient)(nil).Delete), ctx, path, body)
}
